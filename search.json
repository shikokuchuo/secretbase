[{"path":[]},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement code@hibiki-ai.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://shikokuchuo.net/secretbase/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://shikokuchuo.net/secretbase/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 secretbase authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shikokuchuo.net/secretbase/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Gao. Author, maintainer. Hibiki AI Limited. Copyright holder.","code":""},{"path":"https://shikokuchuo.net/secretbase/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao C (2025). secretbase: Cryptographic Hash, Extendable-Output Base64 Functions. R package version 1.0.5, https://doi.org/10.5281/zenodo.10553139.","code":"@Manual{,   title = {secretbase: Cryptographic Hash, Extendable-Output and Base64 Functions},   author = {Charlie Gao},   year = {2025},   note = {R package version 1.0.5},   url = {https://doi.org/10.5281/zenodo.10553139}, }"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"secretbase","dir":"","previous_headings":"","what":"Cryptographic Hash, Extendable-Output and Base64 Functions","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"Fast memory-efficient streaming hash functions base64 encoding / decoding. Hashes strings raw vectors directly. Stream hashes files can larger memory, well -memory objects R’s serialization mechanism. Implementations include SHA-256, SHA-3 ‘Keccak’ cryptographic hash functions, SHAKE256 extendable-output function (XOF), ‘SipHash’ pseudo-random function.","code":"________    /\\ sec   \\ /  \\ ret   \\ \\  /  base /  \\/_______/"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"Install secretbase CRAN:","code":"install.packages(\"secretbase\")"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"","code":"library(secretbase)"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"sha-3","dir":"","previous_headings":"Overview","what":"SHA-3","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"SHA-3 cryptographic hash algorithm, specify bits one 224, 256, 384 512:","code":"sha3(\"secret base\") #> [1] \"a721d57570e7ce366adee2fccbe9770723c6e3622549c31c7cab9dbb4a795520\" sha3(\"secret base\", convert = FALSE) #>  [1] a7 21 d5 75 70 e7 ce 36 6a de e2 fc cb e9 77 07 23 c6 e3 62 25 49 c3 1c 7c #> [26] ab 9d bb 4a 79 55 20 sha3(\"秘密の基地の中\", bits = 512L) #> [1] \"e30cdc73f6575c40d55b5edc8eb4f97940f5ca491640b41612e02a05f3e59dd9c6c33f601d8d7a8e2ca0504b8c22f7bc69fa8f10d7c01aab392781ff4ae1e610\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"stream-hash-r-objects","dir":"","previous_headings":"Overview","what":"Stream hash R objects","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"Character strings raw vectors hashed directly. objects stream hashed using R serialization. memory-efficient performed without allocation serialized object portable always uses R serialization version 3, big-endian representation, skipping headers (contain R version native encoding information)","code":"sha3(data.frame(a = 1, b = 2), bits = 224L) #> [1] \"03778aad53bff7dd68caab94374bba6f07cea235fb97b3c52cf612e9\" sha3(NULL) #> [1] \"b3e37e4c5def1bfb2841b79ef8503b83d1fed46836b5b913d7c16de92966dcee\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"stream-hash-files","dir":"","previous_headings":"Overview","what":"Stream hash files","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"Files read hashed incrementally, accepting files larger memory:","code":"file <- tempfile(); cat(\"secret base\", file = file) sha3(file = file) #> [1] \"a721d57570e7ce366adee2fccbe9770723c6e3622549c31c7cab9dbb4a795520\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"hash-to-integer--shake256-xof","dir":"","previous_headings":"Overview","what":"Hash to integer / SHAKE256 XOF","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"May used deterministic random seeds R’s pseudo random number generators (RNGs).  Specify convert = NA bits = 32 single integer value: use parallel computing, valid method reducing negligible probability RNGs process may overlap. may especially suitable first-best alternatives using recursive streams expensive unable preserve reproducibility. [1]","code":"shake256(\"秘密の基地の中\", bits = 32L, convert = NA) #> [1] 2000208511"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"keccak","dir":"","previous_headings":"Overview","what":"Keccak","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"","code":"keccak(\"secret base\", bits = 384L) #> [1] \"c82bae24175676028e44aa08b9e2424311847adb0b071c68c7ea47edf049b0e935ddd2fc7c499333bccc08c7eb7b1203\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"sha-256","dir":"","previous_headings":"Overview","what":"SHA-256","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"SHA-256 HMAC, pass key character string raw vector:","code":"sha256(\"secret base\") #> [1] \"1951c1ca3d50e95e6ede2b1c26fefd0f0e8eba1e51a837f8ccefb583a2b686fe\" sha256(\"secret base\", key = \"秘密の基地の中\") #> [1] \"ec58099ab21325e792bef8f1aafc0a70e1a7227463cfc410931112705d753392\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"siphash","dir":"","previous_headings":"Overview","what":"SipHash","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"SipHash-1-3 optimized performance. Pass key character string raw vector 16 bytes (128 bits):","code":"siphash13(\"secret base\", key = \"秘密の基地の中\") #> [1] \"a1f0a751892cc7dd\""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"base64-encoding--decoding","dir":"","previous_headings":"Overview","what":"Base64 Encoding / Decoding","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"Strings: Raw vectors: Serialized objects:","code":"base64enc(\"secret base\") #> [1] \"c2VjcmV0IGJhc2U=\" base64dec(base64enc(\"secret base\")) #> [1] \"secret base\" base64enc(as.raw(c(1L, 2L, 4L)), convert = FALSE) #> [1] 41 51 49 45 base64dec(base64enc(as.raw(c(1L, 2L, 4L))), convert = FALSE) #> [1] 01 02 04 base64enc(data.frame()) #> [1] \"WAoAAAADAAQEAwADBQAAAAAFVVRGLTgAAAMTAAAAAAAABAIAAAABAAQACQAAAAVuYW1lcwAAABAAAAAAAAAEAgAAAAEABAAJAAAACXJvdy5uYW1lcwAAAA0AAAAAAAAEAgAAAAEABAAJAAAABWNsYXNzAAAAEAAAAAEABAAJAAAACmRhdGEuZnJhbWUAAAD+\" base64dec(base64enc(data.frame()), convert = NA) #> data frame with 0 columns and 0 rows"},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"implementation","dir":"","previous_headings":"","what":"Implementation","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"SHA-3 Secure Hash Standard published National Institute Standards Technology (NIST) 2015 doi:10.6028/NIST.FIPS.202. SHA-3 based Keccak algorithm, designed G. Bertoni, J. Daemen, M. Peeters G. Van Assche. SHA-256 Secure Hash Standard published NIST 2002 https://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf. SHA-256, SHA-3, Keccak, base64 implementations based ‘Mbed TLS’ Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls. SipHash family pseudo-random functions Jean-Philippe Aumasson Daniel J. Bernstein published 2012 https://ia.cr/2012/351. [2] SipHash implementation based Daniele Nicolodi, David Rheinsberg Tom Gundersen https://github.com/c-util/c-siphash, turn based reference implementation Jean-Philippe Aumasson Daniel J. Bernstein released public domain https://github.com/veorq/SipHash.","code":""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"[1] Pierre L’Ecuyer, David Munger, Boris Oreshkin Richard Simard (2017), “Random numbers parallel computers: Requirements methods, emphasis GPUs”, Mathematics Computers Simulation, Vol. 135, May 2017, pp. 3-17 doi:10.1016/j.matcom.2016.05.00. [2] Jean-Philippe Aumasson Daniel J. Bernstein (2012), “SipHash: fast short-input PRF”, Paper 2012/351, Cryptology ePrint Archive, https://ia.cr/2012/351.","code":""},{"path":"https://shikokuchuo.net/secretbase/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Cryptographic Hash, Extendable-Output and Base64 Functions","text":"◈ secretbase R package: https://shikokuchuo.net/secretbase/ Mbed TLS website: https://www.trustedfirmware.org/projects/mbed-tls SipHash streaming implementation: https://github.com/c-util/c-siphash SipHash reference implementation: https://github.com/veorq/SipHash – Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":null,"dir":"Reference","previous_headings":"","what":"Base64 Decode — base64dec","title":"Base64 Decode — base64dec","text":"Decodes character string, raw vector object base64 encoding.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base64 Decode — base64dec","text":"","code":"base64dec(x, convert = TRUE)"},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base64 Decode — base64dec","text":"x object. convert logical TRUE convert back character string, FALSE convert back raw vector NA decode unserialize back original object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base64 Decode — base64dec","text":"character string, raw vector, object depending value convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base64 Decode — base64dec","text":"value convert set TRUE, FALSE NA reverse 3 encoding operations (strings, raw vectors arbitrary objects), order return original object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Base64 Decode — base64dec","text":"implementation based 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":[]},{"path":"https://shikokuchuo.net/secretbase/reference/base64dec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base64 Decode — base64dec","text":"","code":"base64dec(base64enc(\"secret base\")) #> [1] \"secret base\" base64dec(base64enc(as.raw(c(1L, 2L, 4L))), convert = FALSE) #> [1] 01 02 04 base64dec(base64enc(data.frame()), convert = NA) #> data frame with 0 columns and 0 rows"},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Base64 Encode — base64enc","title":"Base64 Encode — base64enc","text":"Encodes character string, raw vector object base64 encoding.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base64 Encode — base64enc","text":"","code":"base64enc(x, convert = TRUE)"},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base64 Encode — base64enc","text":"x object. convert logical TRUE encode character string FALSE raw vector.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base64 Encode — base64enc","text":"character string raw vector depending value convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base64 Encode — base64enc","text":"character string raw vector (attributes) encoded , whilst objects first serialized (using R serialisation version 3, big-endian representation).","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Base64 Encode — base64enc","text":"implementation based 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":[]},{"path":"https://shikokuchuo.net/secretbase/reference/base64enc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base64 Encode — base64enc","text":"","code":"base64enc(\"secret base\") #> [1] \"c2VjcmV0IGJhc2U=\" base64enc(as.raw(c(1L, 2L, 4L)), convert = FALSE) #> [1] 41 51 49 45 base64enc(data.frame()) #> [1] \"WAoAAAADAAQEAwADBQAAAAAFVVRGLTgAAAMTAAAAAAAABAIAAAABAAQACQAAAAVuYW1lcwAAABAAAAAAAAAEAgAAAAEABAAJAAAACXJvdy5uYW1lcwAAAA0AAAAAAAAEAgAAAAEABAAJAAAABWNsYXNzAAAAEAAAAAEABAAJAAAACmRhdGEuZnJhbWUAAAD+\""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":null,"dir":"Reference","previous_headings":"","what":"Keccak Cryptographic Hash Algorithms — keccak","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"Returns Keccak hash supplied object file.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"","code":"keccak(x, bits = 256L, convert = TRUE, file)"},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"x object hash. character string raw vector (without attributes) hashed . objects stream hashed using native R serialization. bits integer output size returned hash. Must one 224, 256, 384 512. convert logical TRUE convert hash hex representation character string, FALSE return directly raw vector, NA return vector (32-bit) integers. file character file name / path. specified, x ignored. file stream hashed, file can larger memory.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"character string, raw integer vector depending convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"r-serialization-stream-hashing","dir":"Reference","previous_headings":"","what":"R Serialization Stream Hashing","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"used, serialization always version 3 big-endian representation headers (containing R version native encoding information) skipped ensure portability across platforms. hashing performed streaming fashion, materialization , memory allocation , serialized object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"Keccak underlying algorithm SHA-3, identical apart value padding parameter. Keccak algorithm designed G. Bertoni, J. Daemen, M. Peeters G. Van Assche. implementation based one 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/keccak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keccak Cryptographic Hash Algorithms — keccak","text":"","code":"# Keccak-256 hash as character string: keccak(\"secret base\") #> [1] \"3fc6092bbec5a434a9933b486a89fa466c1ca013d1e37ab4348ce3764f3463d1\"  # Keccak-256 hash as raw vector: keccak(\"secret base\", convert = FALSE) #>  [1] 3f c6 09 2b be c5 a4 34 a9 93 3b 48 6a 89 fa 46 6c 1c a0 13 d1 e3 7a b4 34 #> [26] 8c e3 76 4f 34 63 d1  # Keccak-224 hash as character string: keccak(\"secret base\", bits = 224) #> [1] \"1ddaa7776f138ff5bba898ca7530410a52d09da412c4276bda0682a8\"  # Keccak-384 hash as character string: keccak(\"secret base\", bits = 384) #> [1] \"c82bae24175676028e44aa08b9e2424311847adb0b071c68c7ea47edf049b0e935ddd2fc7c499333bccc08c7eb7b1203\"  # Keccak-512 hash as character string: keccak(\"secret base\", bits = 512) #> [1] \"38297e891d9118e4cf6ff5ba6d6de8c2c3bfa790b425848da7b1d8dffcb4a6a3ca2e32ca0a66f36ce2882786ce2299642de8ffd3bae3b51a1ee145fad555a9d8\"  # Keccak-256 hash a file: file <- tempfile(); cat(\"secret base\", file = file) keccak(file = file) #> [1] \"3fc6092bbec5a434a9933b486a89fa466c1ca013d1e37ab4348ce3764f3463d1\" unlink(file)"},{"path":"https://shikokuchuo.net/secretbase/reference/secretbase-package.html","id":null,"dir":"Reference","previous_headings":"","what":"secretbase: Cryptographic Hash, Extendable-Output and Base64 Functions — secretbase-package","title":"secretbase: Cryptographic Hash, Extendable-Output and Base64 Functions — secretbase-package","text":"Fast memory-efficient streaming hash functions base64 encoding / decoding. Hashes strings raw vectors directly. Stream hashes files can larger memory, well -memory objects R's serialization mechanism. Implementations include SHA-256, SHA-3 'Keccak' cryptographic hash functions, SHAKE256 extendable-output function (XOF), 'SipHash' pseudo-random function.","code":""},{"path":[]},{"path":"https://shikokuchuo.net/secretbase/reference/secretbase-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"secretbase: Cryptographic Hash, Extendable-Output and Base64 Functions — secretbase-package","text":"Charlie Gao charlie.gao@shikokuchuo.net (ORCID)","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":null,"dir":"Reference","previous_headings":"","what":"SHA-256 Cryptographic Hash Algorithm — sha256","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"Returns SHA-256 hash supplied object file, HMAC secret key supplied.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"","code":"sha256(x, key = NULL, convert = TRUE, file)"},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"x object hash. character string raw vector (without attributes) hashed . objects stream hashed using native R serialization. key NULL, SHA-256 hash x returned. character string raw vector, used secret key generate HMAC. Note: character vectors, first element used. convert logical TRUE convert hash hex representation character string, FALSE return directly raw vector, NA return vector (32-bit) integers. file character file name / path. specified, x ignored. file stream hashed, file can larger memory.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"character string, raw integer vector depending convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"r-serialization-stream-hashing","dir":"Reference","previous_headings":"","what":"R Serialization Stream Hashing","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"used, serialization always version 3 big-endian representation headers (containing R version native encoding information) skipped ensure portability across platforms. hashing performed streaming fashion, materialization , memory allocation , serialized object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"SHA-256 Secure Hash Standard published National Institute Standards Technology (NIST) 2002 https://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf. implementation based one 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha256.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SHA-256 Cryptographic Hash Algorithm — sha256","text":"","code":"# SHA-256 hash as character string: sha256(\"secret base\") #> [1] \"1951c1ca3d50e95e6ede2b1c26fefd0f0e8eba1e51a837f8ccefb583a2b686fe\"  # SHA-256 hash as raw vector: sha256(\"secret base\", convert = FALSE) #>  [1] 19 51 c1 ca 3d 50 e9 5e 6e de 2b 1c 26 fe fd 0f 0e 8e ba 1e 51 a8 37 f8 cc #> [26] ef b5 83 a2 b6 86 fe  # SHA-256 hash a file: file <- tempfile(); cat(\"secret base\", file = file) sha256(file = file) #> [1] \"1951c1ca3d50e95e6ede2b1c26fefd0f0e8eba1e51a837f8ccefb583a2b686fe\" unlink(file)  # SHA-256 HMAC using a character string secret key: sha256(\"secret\", key = \"base\") #> [1] \"14b24e4c66bd03c1d6b59bc59e1e47468a437001662ae4be2cb30e0483e13e44\"  # SHA-256 HMAC using a raw vector secret key: sha256(\"secret\", key = charToRaw(\"base\")) #> [1] \"14b24e4c66bd03c1d6b59bc59e1e47468a437001662ae4be2cb30e0483e13e44\""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":null,"dir":"Reference","previous_headings":"","what":"SHA-3 Cryptographic Hash Algorithms — sha3","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"Returns SHA-3 hash supplied object file.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"","code":"sha3(x, bits = 256L, convert = TRUE, file)"},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"x object hash. character string raw vector (without attributes) hashed . objects stream hashed using native R serialization. bits integer output size returned hash. Must one 224, 256, 384 512. convert logical TRUE convert hash hex representation character string, FALSE return directly raw vector, NA return vector (32-bit) integers. file character file name / path. specified, x ignored. file stream hashed, file can larger memory.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"character string, raw integer vector depending convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"r-serialization-stream-hashing","dir":"Reference","previous_headings":"","what":"R Serialization Stream Hashing","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"used, serialization always version 3 big-endian representation headers (containing R version native encoding information) skipped ensure portability across platforms. hashing performed streaming fashion, materialization , memory allocation , serialized object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"SHA-3 Secure Hash Standard published National Institute Standards Technology (NIST) 2015 doi:10.6028/NIST.FIPS.202 . implementation based one 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/sha3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SHA-3 Cryptographic Hash Algorithms — sha3","text":"","code":"# SHA3-256 hash as character string: sha3(\"secret base\") #> [1] \"a721d57570e7ce366adee2fccbe9770723c6e3622549c31c7cab9dbb4a795520\"  # SHA3-256 hash as raw vector: sha3(\"secret base\", convert = FALSE) #>  [1] a7 21 d5 75 70 e7 ce 36 6a de e2 fc cb e9 77 07 23 c6 e3 62 25 49 c3 1c 7c #> [26] ab 9d bb 4a 79 55 20  # SHA3-224 hash as character string: sha3(\"secret base\", bits = 224) #> [1] \"5511b3469d3f1a87b62ce8f0d2dc9510ec5e4547579b8afb32052f99\"  # SHA3-384 hash as character string: sha3(\"secret base\", bits = 384) #> [1] \"79e54f865df004dde10dc2f61baf47eb4637c68d87a2baeb7fe6bc0ac983c2154835ec7deb49b16c246c0dc1d43e32f9\"  # SHA3-512 hash as character string: sha3(\"secret base\", bits = 512) #> [1] \"31076b4690961320a761be0951eeaa9efd0c75c37137a2a50877cbebb8afcc6d7927c41a120ae8fa73fdce8fff726fcbc51d448d020240bc7455963a16e639b1\"  # SHA3-256 hash a file: file <- tempfile(); cat(\"secret base\", file = file) sha3(file = file) #> [1] \"a721d57570e7ce366adee2fccbe9770723c6e3622549c31c7cab9dbb4a795520\" unlink(file)"},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":null,"dir":"Reference","previous_headings":"","what":"SHAKE256 Extendable Output Function — shake256","title":"SHAKE256 Extendable Output Function — shake256","text":"Returns SHAKE256 hash supplied object file.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SHAKE256 Extendable Output Function — shake256","text":"","code":"shake256(x, bits = 256L, convert = TRUE, file)"},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SHAKE256 Extendable Output Function — shake256","text":"x object hash. character string raw vector (without attributes) hashed . objects stream hashed using native R serialization. bits integer output size returned hash. Value must 8 2^24. convert logical TRUE convert hash hex representation character string, FALSE return directly raw vector, NA return vector (32-bit) integers. file character file name / path. specified, x ignored. file stream hashed, file can larger memory.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SHAKE256 Extendable Output Function — shake256","text":"character string, raw integer vector depending convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SHAKE256 Extendable Output Function — shake256","text":"produce single integer values suitable use random seeds R's pseudo random number generators (RNGs), set ‘bits’ 32 ‘convert’ NA.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"r-serialization-stream-hashing","dir":"Reference","previous_headings":"","what":"R Serialization Stream Hashing","title":"SHAKE256 Extendable Output Function — shake256","text":"used, serialization always version 3 big-endian representation headers (containing R version native encoding information) skipped ensure portability across platforms. hashing performed streaming fashion, materialization , memory allocation , serialized object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SHAKE256 Extendable Output Function — shake256","text":"implementation based one 'Mbed TLS Contributors' 'Mbed TLS' Trusted Firmware Project https://www.trustedfirmware.org/projects/mbed-tls.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/shake256.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SHAKE256 Extendable Output Function — shake256","text":"","code":"# SHAKE256 hash as character string: shake256(\"secret base\") #> [1] \"995ebac18dbfeb170606cbbc0f2accce85db4db0dcf4fbe4d3efaf8ccf4e0a94\"  # SHAKE256 hash as raw vector: shake256(\"secret base\", convert = FALSE) #>  [1] 99 5e ba c1 8d bf eb 17 06 06 cb bc 0f 2a cc ce 85 db 4d b0 dc f4 fb e4 d3 #> [26] ef af 8c cf 4e 0a 94  # SHAKE256 hash to integer: shake256(\"secret base\", bits = 32L, convert = NA) #> [1] -1044750695  # SHAKE256 hash a file: file <- tempfile(); cat(\"secret base\", file = file) shake256(file = file) #> [1] \"995ebac18dbfeb170606cbbc0f2accce85db4db0dcf4fbe4d3efaf8ccf4e0a94\" unlink(file)"},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":null,"dir":"Reference","previous_headings":"","what":"SipHash Pseudorandom Function — siphash13","title":"SipHash Pseudorandom Function — siphash13","text":"Returns fast, cryptographically-strong SipHash keyed hash supplied object file. SipHash-1-3 optimised performance. Note: SipHash cryptographic hash algorithm.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SipHash Pseudorandom Function — siphash13","text":"","code":"siphash13(x, key = NULL, convert = TRUE, file)"},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SipHash Pseudorandom Function — siphash13","text":"x object hash. character string raw vector (without attributes) hashed . objects stream hashed using native R serialization. key character string raw vector comprising 16 byte (128 bit) key data, else NULL equivalent '0'. longer vector supplied, first 16 bytes used, shorter, padded trailing '0'. Note: character vectors, first element used. convert logical TRUE convert hash hex representation character string, FALSE return directly raw vector, NA return vector (32-bit) integers. file character file name / path. specified, x ignored. file stream hashed, file can larger memory.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SipHash Pseudorandom Function — siphash13","text":"character string, raw integer vector depending convert.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"r-serialization-stream-hashing","dir":"Reference","previous_headings":"","what":"R Serialization Stream Hashing","title":"SipHash Pseudorandom Function — siphash13","text":"used, serialization always version 3 big-endian representation headers (containing R version native encoding information) skipped ensure portability across platforms. hashing performed streaming fashion, materialization , memory allocation , serialized object.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SipHash Pseudorandom Function — siphash13","text":"SipHash family cryptographically-strong pseudorandom functions (PRFs) described 'SipHash: fast short-input PRF', Jean-Philippe Aumasson Daniel J. Bernstein, Paper 2012/351, 2012, Cryptology ePrint Archive https://ia.cr/2012/351. implementation based SipHash streaming implementation Daniele Nicolodi, David Rheinsberg Tom Gundersen https://github.com/c-util/c-siphash. turn based SipHash reference implementation Jean-Philippe Aumasson Daniel J. Bernstein released public domain https://github.com/veorq/SipHash.","code":""},{"path":"https://shikokuchuo.net/secretbase/reference/siphash13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SipHash Pseudorandom Function — siphash13","text":"","code":"# SipHash-1-3 hash as character string: siphash13(\"secret base\") #> [1] \"48c60a316babef0e\"  # SipHash-1-3 hash as raw vector: siphash13(\"secret base\", convert = FALSE) #> [1] 48 c6 0a 31 6b ab ef 0e  # SipHash-1-3 hash using a character string key: siphash13(\"secret\", key = \"base\") #> [1] \"a790b03148f72cce\"  # SipHash-1-3 hash using a raw vector key: siphash13(\"secret\", key = charToRaw(\"base\")) #> [1] \"a790b03148f72cce\"  # SipHash-1-3 hash a file: file <- tempfile(); cat(\"secret base\", file = file) siphash13(file = file) #> [1] \"48c60a316babef0e\" unlink(file)"},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-105","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.5","title":"secretbase 1.0.5","text":"CRAN release: 2025-03-04 Package re-licensed MIT licence.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-104","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.4","title":"secretbase 1.0.4","text":"CRAN release: 2025-01-16 base64dec() now errors convert = TRUE conversion character string fails, longer returning raw vector (accompanied warning).","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-103","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.3","title":"secretbase 1.0.3","text":"CRAN release: 2024-10-02 base64dec() now emits suppressable warning failing convert back character string.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-102","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.2","title":"secretbase 1.0.2","text":"CRAN release: 2024-09-09 Improves hash performance situations, especially large files, optimizing buffer sizes.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-101","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.1","title":"secretbase 1.0.1","text":"CRAN release: 2024-07-22 Improved error message argument ‘convert’ logical type.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-100","dir":"Changelog","previous_headings":"","what":"secretbase 1.0.0","title":"secretbase 1.0.0","text":"CRAN release: 2024-06-16 Adds base64 encoding decoding. sha3() restricts ‘bit’ argument one 224, 256, 384 512.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-050","dir":"Changelog","previous_headings":"","what":"secretbase 0.5.0","title":"secretbase 0.5.0","text":"CRAN release: 2024-04-25 Adds Keccak cryptographic hash algorithm. Adds shake256() delineate sha3(). Use sha3() supplying ‘bit’ argument 224, 256, 384 512 deprecated.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-040","dir":"Changelog","previous_headings":"","what":"secretbase 0.4.0","title":"secretbase 0.4.0","text":"CRAN release: 2024-04-04 Adds HMAC generation sha256(). Adds SipHash pseudo-random function (PRF) fast, cryptographically-strong keyed hash.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-0301","dir":"Changelog","previous_headings":"","what":"secretbase 0.3.0.1","title":"secretbase 0.3.0.1","text":"CRAN release: 2024-03-01 CRAN release correcting Clang-UBSAN checks.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-030","dir":"Changelog","previous_headings":"","what":"secretbase 0.3.0","title":"secretbase 0.3.0","text":"CRAN release: 2024-02-21 Adds SHA-256 cryptographic hash algorithm. Folds file hashing ‘file’ argument main hash function.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-020","dir":"Changelog","previous_headings":"","what":"secretbase 0.2.0","title":"secretbase 0.2.0","text":"CRAN release: 2024-02-01 Adds file hashing interface.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-010","dir":"Changelog","previous_headings":"","what":"secretbase 0.1.0","title":"secretbase 0.1.0","text":"CRAN release: 2024-01-22 Initial CRAN release.","code":""},{"path":"https://shikokuchuo.net/secretbase/news/index.html","id":"secretbase-001","dir":"Changelog","previous_headings":"","what":"secretbase 0.0.1","title":"secretbase 0.0.1","text":"Initial release rOpenSci R-universe Github.","code":""}]
